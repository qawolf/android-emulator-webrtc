/**
 * @fileoverview gRPC-Web generated client stub for android.emulation.control
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.23.1
// source: rtc_service.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as rtc_service_pb from "./rtc_service_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";

export class RtcClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorrequestRtcStream = new grpcWeb.MethodDescriptor(
    "/android.emulation.control.Rtc/requestRtcStream",
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    rtc_service_pb.RtcId,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    rtc_service_pb.RtcId.deserializeBinary,
  );

  requestRtcStream(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
  ): Promise<rtc_service_pb.RtcId>;

  requestRtcStream(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: rtc_service_pb.RtcId) => void,
  ): grpcWeb.ClientReadableStream<rtc_service_pb.RtcId>;

  requestRtcStream(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError, response: rtc_service_pb.RtcId) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/android.emulation.control.Rtc/requestRtcStream",
        request,
        metadata || {},
        this.methodDescriptorrequestRtcStream,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/android.emulation.control.Rtc/requestRtcStream",
      request,
      metadata || {},
      this.methodDescriptorrequestRtcStream,
    );
  }

  methodDescriptorsendJsepMessage = new grpcWeb.MethodDescriptor(
    "/android.emulation.control.Rtc/sendJsepMessage",
    grpcWeb.MethodType.UNARY,
    rtc_service_pb.JsepMsg,
    google_protobuf_empty_pb.Empty,
    (request: rtc_service_pb.JsepMsg) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary,
  );

  sendJsepMessage(
    request: rtc_service_pb.JsepMsg,
    metadata: grpcWeb.Metadata | null,
  ): Promise<google_protobuf_empty_pb.Empty>;

  sendJsepMessage(
    request: rtc_service_pb.JsepMsg,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: google_protobuf_empty_pb.Empty,
    ) => void,
  ): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  sendJsepMessage(
    request: rtc_service_pb.JsepMsg,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: google_protobuf_empty_pb.Empty,
    ) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/android.emulation.control.Rtc/sendJsepMessage",
        request,
        metadata || {},
        this.methodDescriptorsendJsepMessage,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/android.emulation.control.Rtc/sendJsepMessage",
      request,
      metadata || {},
      this.methodDescriptorsendJsepMessage,
    );
  }

  methodDescriptorreceiveJsepMessages = new grpcWeb.MethodDescriptor(
    "/android.emulation.control.Rtc/receiveJsepMessages",
    grpcWeb.MethodType.SERVER_STREAMING,
    rtc_service_pb.RtcId,
    rtc_service_pb.JsepMsg,
    (request: rtc_service_pb.RtcId) => {
      return request.serializeBinary();
    },
    rtc_service_pb.JsepMsg.deserializeBinary,
  );

  receiveJsepMessages(
    request: rtc_service_pb.RtcId,
    metadata?: grpcWeb.Metadata,
  ): grpcWeb.ClientReadableStream<rtc_service_pb.JsepMsg> {
    return this.client_.serverStreaming(
      this.hostname_ + "/android.emulation.control.Rtc/receiveJsepMessages",
      request,
      metadata || {},
      this.methodDescriptorreceiveJsepMessages,
    );
  }

  methodDescriptorreceiveJsepMessage = new grpcWeb.MethodDescriptor(
    "/android.emulation.control.Rtc/receiveJsepMessage",
    grpcWeb.MethodType.UNARY,
    rtc_service_pb.RtcId,
    rtc_service_pb.JsepMsg,
    (request: rtc_service_pb.RtcId) => {
      return request.serializeBinary();
    },
    rtc_service_pb.JsepMsg.deserializeBinary,
  );

  receiveJsepMessage(
    request: rtc_service_pb.RtcId,
    metadata: grpcWeb.Metadata | null,
  ): Promise<rtc_service_pb.JsepMsg>;

  receiveJsepMessage(
    request: rtc_service_pb.RtcId,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError, response: rtc_service_pb.JsepMsg) => void,
  ): grpcWeb.ClientReadableStream<rtc_service_pb.JsepMsg>;

  receiveJsepMessage(
    request: rtc_service_pb.RtcId,
    metadata: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: rtc_service_pb.JsepMsg,
    ) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/android.emulation.control.Rtc/receiveJsepMessage",
        request,
        metadata || {},
        this.methodDescriptorreceiveJsepMessage,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/android.emulation.control.Rtc/receiveJsepMessage",
      request,
      metadata || {},
      this.methodDescriptorreceiveJsepMessage,
    );
  }
}
